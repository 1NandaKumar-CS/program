#include<stdio.h>

#include<stdlib.h>

struct node
{

int data;

struct node *next;

};
struct node *head;


void beginsert ();

void lastinsert ();

void traverse();

void beg_delete();

void last_delete();

//void random_delete();

void display();

void search();


void main()
{

    int choice =0,option;

    while(choice != 9) {

    printf("\n\n*********Main Menu*********\n");

    printf("\nChoose one option from the following list...\n");

    printf("\n===========================================================\n");

    printf("\n1. Insert in beginning\n2. Insert at last\n3. Insert at any random location\n4.Delete from Beginning\n 5.Delete from last\n6.Delete node after specified location\n7. Search for an element\n8. Show\n9.Exit\n"); printf("\nEnter your choice?\n");

    scanf("\n%d",&choice);

    switch (choice)

    {

        case 1: beginsert();

                break;

        case 2: lastinsert();

                break;

        case 3: randominsert();

                break;

        case 4: begin_delete();

                break;

        case 5: last_delete();

                break;

        case 6: random_delete();

                break;

        case 7: search();

                break;

        case 8: display();

                break;

        case 9: exit(0);
      }
    } while (option!=4);
 return 0;
}

void beginsert(int item) {



    struct node *ptr = (struct node *) malloc(sizeof(struct node *));
    struct node *temp;
    if (ptr == NULL)
    {
         printf("\nOVERFLOW");
    }
    else
    {
        ptr -> data = item;
        if(head == NULL)
        {
            head = ptr;
            ptr -> next = head;
        }
        else{
            temp = head;
            while(temp-> next!=head)
                temp = temp->next;
            ptr->next = head;
            temp -> next = ptr;
            head = ptr;
        }
         printf("\nNode inserted");
    }
}

void lastinsert(struct node *ptr,struct node *temp, int item) {

    ptr = (struct node*) malloc(sizeof(struct node));

    if(ptr == NULL) {

printf("\nOVERFLOW");

}
else

{

//printf("\nEnter value?\n"); scanf("%d",&item);

ptr->data = item;

if(head == NULL){

head = ptr;
ptr ->next = head;
}

else

{

temp = head;

while (temp -> next != head){
temp = temp->next;
}

temp->next = ptr;
ptr ->next = head;
}
}

void beg_delete()

{

struct node *ptr;

if(head == NULL)

{

printf("\nUNDERFLOW\n");
}

else if(head->next == head)
{
    head = NULL;
    free(head);
    printf("\nNode Deleted\n");
}

else

{

ptr = head;

while(ptr -> next != head)
    ptr = ptr ->next;
    ptr->next = head->next;
    free(head);
    head = ptr->next;
        printf("\nNode Deleted\n"); }
}
}


void last_delete() {

struct node *ptr, *preptr;
 if(head==NULL) {

printf("\nUNDERFLOW\n"); }

else if (head ->next == head)

{

head = NULL;

free(head);
 printf("\nNode Deleted\n");

}

else

{

ptr = head;

while(ptr ->next != head)

{

preptr=ptr;

ptr = ptr->next;}

preptr->next = ptr ->next;
    free(ptr);
    printf("\nNode Deleted\n");

}
}



void search()
{
struct node *ptr;
int item,i=0,flag=1;
ptr = head;
if(ptr == NULL)
{
printf("\nEmpty List\n");
}
else
{
printf("\nEnter item which you want to search?\n");
scanf("%d",&item);
{
if(head->data == item){
printf("item found at location %d",i+1);
flag=0;
 return;
}
else
{ while (ptr->next != head)
{
if(ptr->data == item)
{
printf("item found at location %d ",i+1);

flag=0;
return;
}
else
{
flag=1;
}
i++;
ptr = ptr ->next;
}
}
if(flag!=0)
{
printf("Item not found\n");
return;
}
}



void traverse()
{
struct node *ptr;
 ptr=head;

 if(head == NULL)
{
printf("\nnothing to print");
}
else
{
printf("\n printing values... \n");
 while(ptr -> next != head) {
printf("%d\n", ptr -> data);
 ptr = ptr ->next;
}
printf("%d\n", ptr -> data);
}
}

void display()
{
struct node *ptr;

ptr = head;

if(ptr == NULL) {

printf("Nothing to print");

}

 else

{

printf("\nprinting values... .\n");

while (ptr!=NULL)
{
printf("\n%d",ptr->data);
ptr = ptr ->next;
}
}
}
